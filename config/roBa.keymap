#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        q {
            bindings = <&kp Q>;
            key-positions = <0 10>;
            layers = <0>;
        };

        mouse4 {
            bindings = <&mkp MB4>;
            key-positions = <18 30>;
            layers = <4>;
        };

        mouce5 {
            bindings = <&mkp MB5>;
            key-positions = <20 32>;
            layers = <4>;
        };

        lay2-muhwnkan {
            bindings = <&lt 2 INT_MUHENKAN>;
            key-positions = <37 38>;
        };

        henkan {
            bindings = <&enter_henkan>;
            key-positions = <40 41>;
        };

        p {
            bindings = <&kp P>;
            key-positions = <9 21>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        right_bracket_macro: right_bracket_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LWIN>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp LEFT_BRACKET>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LEFT_WIN>;

            label = "RIGHT_BRACKET_MACRO";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        hold_3000: hold_3000 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_3000";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <3000>;
            quick-tap-ms = <(-1)>;
            require-prior-idle-ms = <(-1)>;
            flavor = "balanced";
        };

        hold_500: hold_500 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_500";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            quick-tap-ms = <(-1)>;
            require-prior-idle-ms = <(-1)>;
            flavor = "hold-preferred";
        };

        enter_henkan: enter_henkan {
            compatible = "zmk,behavior-tap-dance";
            label = "ENTER_HENKAN";
            #binding-cells = <0>;
            bindings = <&kp INT_HENKAN>, <&kp BACKSPACE>;
        };

        hold_10000: hold_10000 {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_10000";
            bindings = <&lt>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <10000>;
            quick-tap-ms = <(-1)>;
            require-prior-idle-ms = <(-1)>;
            flavor = "tap-unless-interrupted";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB                  &kp W         &kp E               &kp R                            &kp T                                                          &kp Y      &kp U  &kp I      &kp O    &lt 1 P
&hold_3000 LEFT_SHIFT A  &kp S         &kp D               &kp F                            &kp G        &kp ESCAPE                       &kp JP_LBRACKET  &kp H      &kp J  &lt 5 K    &kp L    &lt_to_layer_0 4 MINUS
&hold_3000 LEFT_SHIFT Z  &kp X         &kp C               &kp V                            &kp B        &lt 6 RS(NUMBER_1)               &kp JP_RBRACKET  &kp N      &kp M  &kp COMMA  &kp DOT  &lt 7 SLASH
&kp LCTRL                &kp LEFT_WIN  &lt 2 INT_MUHENKAN  &hold_500 LEFT_ALT INT_MUHENKAN  &lt 1 SPACE  &lt_to_layer_0 3 INT_HENKAN      &kp BACKSPACE    &kp ENTER                             &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        SYMBOL {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4     &kp NUMBER_5                              &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8   &kp NUMBER_9       &kp NUMBER_0
&trans        &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans        &trans      &trans          &trans        &trans        &kp AT         &kp RIGHT_BRACKET  &kp AT_SIGN
&trans        &trans          &trans          &trans           &trans        &trans      &trans          &trans        &trans        &kp SEMICOLON  &kp COLON          &mt RIGHT_SHIFT INT_RO
&trans        &trans          &trans          &trans           &trans        &trans      &kp INT_HENKAN  &trans                                                        &trans
            >;
        };

        FUNCTIOM {
            bindings = <
&kp F1  &kp F2          &kp F3          &kp F4           &kp F5                      &kp F6  &kp F7  &kp F8  &mt F11 F9  &mt F12 F10
&trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &trans  &trans  &trans      &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans  &trans  &trans  &trans      &trans
&trans  &trans          &trans          &trans           &trans  &trans      &trans  &trans                              &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))     &kp UP_ARROW    &kp LC(TAB)          &trans                       &trans        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp DELETE
&kp HOME        &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END  &trans      &trans  &trans        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans
&kp LEFT_SHIFT  &kp LG(LEFT_ARROW)  &kp LG(TAB)     &kp LG(RIGHT_ARROW)  &trans   &trans      &trans  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans
&trans          &trans              &trans          &trans               &trans   &trans      &trans  &trans                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(C_VOLUME_UP) LC(C_VOLUME_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &mkp MB3  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &trans    &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BULETOOTH {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        SHIFT_NUM {
            bindings = <
&kp RS(NUMBER_1)  &kp RS(NUMBER_2)  &kp RS(NUMBER_3)  &trans  &trans                      &kp RS(NUMBER_8)  &kp RS(NUMBER_9)  &kp JP_EQUAL      &kp JP_TILDE  &trans
&kp RS(NUMBER_1)  &trans            &trans            &trans  &trans  &trans      &trans  &trans            &trans            &kp RS(NUMBER_2)  &trans        &trans
&trans            &trans            &trans            &trans  &trans  &trans      &trans  &trans            &trans            &trans            &kp INT_RO    &trans
&trans            &trans            &trans            &trans  &trans  &trans      &trans  &trans                                                              &trans
            >;
        };
    };
};
